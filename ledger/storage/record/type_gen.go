// Code generated by go generate; DO NOT EDIT.
// This file was generated by robots at
// 2019-02-11 17:31:17

package record

func TypeFromRecord(generic Record) TypeID {
	switch generic.(type) {
	case *GenesisRecord:
		return 10
	case *ChildRecord:
		return 11
	case *JetRecord:
		return 12
	case *RequestRecord:
		return 20
	case *ResultRecord:
		return 30
	case *TypeRecord:
		return 31
	case *CodeRecord:
		return 32
	case *ObjectActivateRecord:
		return 33
	case *ObjectAmendRecord:
		return 34
	case *DeactivationRecord:
		return 35
	default:
		panic("record is not registered")
	}
}

func RecordFromType(i TypeID) Record {
	switch i {
	case 10:
		return new(GenesisRecord)
	case 11:
		return new(ChildRecord)
	case 12:
		return new(JetRecord)
	case 20:
		return new(RequestRecord)
	case 30:
		return new(ResultRecord)
	case 31:
		return new(TypeRecord)
	case 32:
		return new(CodeRecord)
	case 33:
		return new(ObjectActivateRecord)
	case 34:
		return new(ObjectAmendRecord)
	case 35:
		return new(DeactivationRecord)
	default:
		panic("record is not registered")
	}
}

func (i TypeID) String() string {
	switch i {
	case 10:
		return "GenesisRecord"
	case 11:
		return "ChildRecord"
	case 12:
		return "JetRecord"
	case 20:
		return "RequestRecord"
	case 30:
		return "ResultRecord"
	case 31:
		return "TypeRecord"
	case 32:
		return "CodeRecord"
	case 33:
		return "ObjectActivateRecord"
	case 34:
		return "ObjectAmendRecord"
	case 35:
		return "DeactivationRecord"
	default:
		panic("record is not registered")
	}
}
