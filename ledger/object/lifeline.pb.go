// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ledger/object/lifeline.proto

package object

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_insolar_insolar_insolar "github.com/insolar/insolar/insolar"
	io "io"
	math "math"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type LifelineRaw struct {
	LatestState         *github_com_insolar_insolar_insolar.ID         `protobuf:"bytes,1,opt,name=LatestState,proto3,customtype=github.com/insolar/insolar/insolar.ID" json:"LatestState,omitempty"`
	LatestStateApproved *github_com_insolar_insolar_insolar.ID         `protobuf:"bytes,2,opt,name=LatestStateApproved,proto3,customtype=github.com/insolar/insolar/insolar.ID" json:"LatestStateApproved,omitempty"`
	ChildPointer        *github_com_insolar_insolar_insolar.ID         `protobuf:"bytes,3,opt,name=ChildPointer,proto3,customtype=github.com/insolar/insolar/insolar.ID" json:"ChildPointer,omitempty"`
	Parent              github_com_insolar_insolar_insolar.Reference   `protobuf:"bytes,4,opt,name=Parent,proto3,customtype=github.com/insolar/insolar/insolar.Reference" json:"Parent"`
	Delegates           []DelegateKeyValue                             `protobuf:"bytes,5,rep,name=Delegates,proto3" json:"Delegates"`
	State               StateID                                        `protobuf:"varint,6,opt,name=State,proto3,customtype=StateID" json:"State"`
	LatestUpdate        github_com_insolar_insolar_insolar.PulseNumber `protobuf:"varint,7,opt,name=LatestUpdate,proto3,customtype=github.com/insolar/insolar/insolar.PulseNumber" json:"LatestUpdate"`
	JetID               github_com_insolar_insolar_insolar.JetID       `protobuf:"bytes,8,opt,name=JetID,proto3,customtype=github.com/insolar/insolar/insolar.JetID" json:"JetID"`
	LatestRequest       *github_com_insolar_insolar_insolar.ID         `protobuf:"bytes,9,opt,name=LatestRequest,proto3,customtype=github.com/insolar/insolar/insolar.ID" json:"LatestRequest,omitempty"`
}

func (m *LifelineRaw) Reset()      { *m = LifelineRaw{} }
func (*LifelineRaw) ProtoMessage() {}
func (*LifelineRaw) Descriptor() ([]byte, []int) {
	return fileDescriptor_4ca0c51acb0e6740, []int{0}
}
func (m *LifelineRaw) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LifelineRaw) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LifelineRaw.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LifelineRaw) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LifelineRaw.Merge(m, src)
}
func (m *LifelineRaw) XXX_Size() int {
	return m.Size()
}
func (m *LifelineRaw) XXX_DiscardUnknown() {
	xxx_messageInfo_LifelineRaw.DiscardUnknown(m)
}

var xxx_messageInfo_LifelineRaw proto.InternalMessageInfo

func (m *LifelineRaw) GetDelegates() []DelegateKeyValue {
	if m != nil {
		return m.Delegates
	}
	return nil
}

type DelegateKeyValue struct {
	Key   github_com_insolar_insolar_insolar.Reference `protobuf:"bytes,1,opt,name=Key,proto3,customtype=github.com/insolar/insolar/insolar.Reference" json:"Key"`
	Value github_com_insolar_insolar_insolar.Reference `protobuf:"bytes,2,opt,name=Value,proto3,customtype=github.com/insolar/insolar/insolar.Reference" json:"Value"`
}

func (m *DelegateKeyValue) Reset()      { *m = DelegateKeyValue{} }
func (*DelegateKeyValue) ProtoMessage() {}
func (*DelegateKeyValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_4ca0c51acb0e6740, []int{1}
}
func (m *DelegateKeyValue) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DelegateKeyValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DelegateKeyValue.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DelegateKeyValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DelegateKeyValue.Merge(m, src)
}
func (m *DelegateKeyValue) XXX_Size() int {
	return m.Size()
}
func (m *DelegateKeyValue) XXX_DiscardUnknown() {
	xxx_messageInfo_DelegateKeyValue.DiscardUnknown(m)
}

var xxx_messageInfo_DelegateKeyValue proto.InternalMessageInfo

func init() {
	proto.RegisterType((*LifelineRaw)(nil), "object.LifelineRaw")
	proto.RegisterType((*DelegateKeyValue)(nil), "object.DelegateKeyValue")
}

func init() { proto.RegisterFile("ledger/object/lifeline.proto", fileDescriptor_4ca0c51acb0e6740) }

var fileDescriptor_4ca0c51acb0e6740 = []byte{
	// 468 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0xd3, 0x31, 0x6f, 0xd3, 0x40,
	0x14, 0x00, 0x60, 0x1f, 0x89, 0x53, 0x7a, 0x49, 0x05, 0x3a, 0x96, 0x13, 0x42, 0xe7, 0xa8, 0x52,
	0xa5, 0x0c, 0xd4, 0x41, 0x50, 0x31, 0x20, 0x16, 0x42, 0x54, 0x29, 0x6d, 0x04, 0xe1, 0x2a, 0x18,
	0x58, 0x90, 0x9d, 0xbc, 0xb8, 0x46, 0x57, 0x5f, 0xb8, 0x9c, 0x41, 0xdd, 0xf8, 0x09, 0xfc, 0x04,
	0x26, 0xc4, 0x0f, 0x61, 0xc8, 0x98, 0xb1, 0xea, 0x10, 0x11, 0x67, 0xe9, 0xd8, 0x9f, 0x80, 0x72,
	0x67, 0x44, 0x52, 0x31, 0x44, 0x9e, 0xec, 0xbb, 0x7b, 0xef, 0xf3, 0xd3, 0x7b, 0x67, 0xfc, 0x40,
	0xc0, 0x20, 0x02, 0xd5, 0x94, 0xe1, 0x47, 0xe8, 0xeb, 0xa6, 0x88, 0x87, 0x20, 0xe2, 0x04, 0xfc,
	0x91, 0x92, 0x5a, 0x92, 0x8a, 0xdd, 0xbe, 0xbf, 0x1f, 0xc5, 0xfa, 0x34, 0x0d, 0xfd, 0xbe, 0x3c,
	0x6b, 0x46, 0x32, 0x92, 0x4d, 0x73, 0x1c, 0xa6, 0x43, 0xb3, 0x32, 0x0b, 0xf3, 0x66, 0xd3, 0x76,
	0x7f, 0xb9, 0xb8, 0xda, 0xcd, 0x25, 0x1e, 0x7c, 0x21, 0xaf, 0x71, 0xb5, 0x1b, 0x68, 0x18, 0xeb,
	0x13, 0x1d, 0x68, 0xa0, 0xa8, 0x8e, 0x1a, 0xb5, 0xd6, 0xfe, 0x64, 0xe6, 0xa1, 0xcb, 0x99, 0xb7,
	0xb7, 0x62, 0xc7, 0xc9, 0x58, 0x8a, 0x40, 0xdd, 0x7c, 0xfa, 0x9d, 0x36, 0x5f, 0x15, 0xc8, 0x07,
	0x7c, 0x6f, 0x65, 0xf9, 0x62, 0x34, 0x52, 0xf2, 0x33, 0x0c, 0xe8, 0xad, 0x22, 0xf0, 0xff, 0x24,
	0xf2, 0x06, 0xd7, 0x5e, 0x9e, 0xc6, 0x62, 0xd0, 0x93, 0x71, 0xa2, 0x41, 0xd1, 0x52, 0x11, 0x79,
	0x8d, 0x20, 0x5d, 0x5c, 0xe9, 0x05, 0x0a, 0x12, 0x4d, 0xcb, 0x06, 0x3b, 0x98, 0xcc, 0x3c, 0xe7,
	0x72, 0xe6, 0x3d, 0xdc, 0x00, 0xe3, 0x30, 0x04, 0x05, 0x49, 0x1f, 0x78, 0x6e, 0x90, 0xe7, 0x78,
	0xbb, 0x0d, 0x02, 0xa2, 0x65, 0xed, 0xd4, 0xad, 0x97, 0x1a, 0xd5, 0xc7, 0xd4, 0xb7, 0xd3, 0xf2,
	0xff, 0x1e, 0x1c, 0xc3, 0xf9, 0xbb, 0x40, 0xa4, 0xd0, 0x2a, 0x2f, 0x3f, 0xc5, 0xff, 0x25, 0x90,
	0x3d, 0xec, 0xda, 0x51, 0x54, 0xea, 0xa8, 0xb1, 0xd3, 0xba, 0x93, 0x97, 0xb2, 0x65, 0x36, 0x3b,
	0x6d, 0x6e, 0x4f, 0xc9, 0x7b, 0x5c, 0xb3, 0xcd, 0x79, 0x3b, 0x1a, 0x2c, 0xa3, 0xb7, 0x4c, 0xf4,
	0xd3, 0x3c, 0xda, 0xdf, 0xa0, 0xf0, 0x5e, 0x2a, 0xc6, 0xf0, 0x2a, 0x3d, 0x0b, 0x41, 0xf1, 0x35,
	0x8b, 0x1c, 0x62, 0xf7, 0x08, 0x74, 0xa7, 0x4d, 0x6f, 0x9b, 0x6e, 0x3c, 0xca, 0xd1, 0xc6, 0x06,
	0xa8, 0xc9, 0xe3, 0x36, 0x9d, 0x9c, 0xe0, 0x1d, 0xeb, 0x72, 0xf8, 0x94, 0xc2, 0x58, 0xd3, 0xed,
	0x22, 0xa3, 0x5a, 0x37, 0x9e, 0x95, 0xaf, 0xbe, 0x7b, 0xce, 0xee, 0x0f, 0x84, 0xef, 0xde, 0xec,
	0x25, 0x39, 0xc4, 0xa5, 0x63, 0x38, 0xcf, 0xef, 0x70, 0xb1, 0x19, 0x2e, 0x01, 0x72, 0x84, 0x5d,
	0x03, 0xe6, 0x97, 0xb6, 0x98, 0x64, 0x89, 0xd6, 0xc1, 0x74, 0xce, 0x9c, 0x8b, 0x39, 0x73, 0xae,
	0xe7, 0x0c, 0x7d, 0xcd, 0x18, 0xfa, 0x99, 0x31, 0x34, 0xc9, 0x18, 0x9a, 0x66, 0x0c, 0xfd, 0xce,
	0x18, 0xba, 0xca, 0x98, 0x73, 0x9d, 0x31, 0xf4, 0x6d, 0xc1, 0x9c, 0xe9, 0x82, 0x39, 0x17, 0x0b,
	0xe6, 0x84, 0x15, 0xf3, 0xb3, 0x3e, 0xf9, 0x13, 0x00, 0x00, 0xff, 0xff, 0x53, 0xdd, 0x58, 0x58,
	0x03, 0x04, 0x00, 0x00,
}

func (this *DelegateKeyValue) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DelegateKeyValue)
	if !ok {
		that2, ok := that.(DelegateKeyValue)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Key.Equal(that1.Key) {
		return false
	}
	if !this.Value.Equal(that1.Value) {
		return false
	}
	return true
}
func (this *LifelineRaw) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 13)
	s = append(s, "&object.LifelineRaw{")
	s = append(s, "LatestState: "+fmt.Sprintf("%#v", this.LatestState)+",\n")
	s = append(s, "LatestStateApproved: "+fmt.Sprintf("%#v", this.LatestStateApproved)+",\n")
	s = append(s, "ChildPointer: "+fmt.Sprintf("%#v", this.ChildPointer)+",\n")
	s = append(s, "Parent: "+fmt.Sprintf("%#v", this.Parent)+",\n")
	if this.Delegates != nil {
		vs := make([]*DelegateKeyValue, len(this.Delegates))
		for i := range vs {
			vs[i] = &this.Delegates[i]
		}
		s = append(s, "Delegates: "+fmt.Sprintf("%#v", vs)+",\n")
	}
	s = append(s, "State: "+fmt.Sprintf("%#v", this.State)+",\n")
	s = append(s, "LatestUpdate: "+fmt.Sprintf("%#v", this.LatestUpdate)+",\n")
	s = append(s, "JetID: "+fmt.Sprintf("%#v", this.JetID)+",\n")
	s = append(s, "LatestRequest: "+fmt.Sprintf("%#v", this.LatestRequest)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DelegateKeyValue) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&object.DelegateKeyValue{")
	s = append(s, "Key: "+fmt.Sprintf("%#v", this.Key)+",\n")
	s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringLifeline(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *LifelineRaw) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LifelineRaw) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.LatestState != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintLifeline(dAtA, i, uint64(m.LatestState.Size()))
		n1, err := m.LatestState.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.LatestStateApproved != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintLifeline(dAtA, i, uint64(m.LatestStateApproved.Size()))
		n2, err := m.LatestStateApproved.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.ChildPointer != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintLifeline(dAtA, i, uint64(m.ChildPointer.Size()))
		n3, err := m.ChildPointer.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	dAtA[i] = 0x22
	i++
	i = encodeVarintLifeline(dAtA, i, uint64(m.Parent.Size()))
	n4, err := m.Parent.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n4
	if len(m.Delegates) > 0 {
		for _, msg := range m.Delegates {
			dAtA[i] = 0x2a
			i++
			i = encodeVarintLifeline(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.State != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintLifeline(dAtA, i, uint64(m.State))
	}
	if m.LatestUpdate != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintLifeline(dAtA, i, uint64(m.LatestUpdate))
	}
	dAtA[i] = 0x42
	i++
	i = encodeVarintLifeline(dAtA, i, uint64(m.JetID.Size()))
	n5, err := m.JetID.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n5
	if m.LatestRequest != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintLifeline(dAtA, i, uint64(m.LatestRequest.Size()))
		n6, err := m.LatestRequest.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	return i, nil
}

func (m *DelegateKeyValue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DelegateKeyValue) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintLifeline(dAtA, i, uint64(m.Key.Size()))
	n7, err := m.Key.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n7
	dAtA[i] = 0x12
	i++
	i = encodeVarintLifeline(dAtA, i, uint64(m.Value.Size()))
	n8, err := m.Value.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n8
	return i, nil
}

func encodeVarintLifeline(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *LifelineRaw) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LatestState != nil {
		l = m.LatestState.Size()
		n += 1 + l + sovLifeline(uint64(l))
	}
	if m.LatestStateApproved != nil {
		l = m.LatestStateApproved.Size()
		n += 1 + l + sovLifeline(uint64(l))
	}
	if m.ChildPointer != nil {
		l = m.ChildPointer.Size()
		n += 1 + l + sovLifeline(uint64(l))
	}
	l = m.Parent.Size()
	n += 1 + l + sovLifeline(uint64(l))
	if len(m.Delegates) > 0 {
		for _, e := range m.Delegates {
			l = e.Size()
			n += 1 + l + sovLifeline(uint64(l))
		}
	}
	if m.State != 0 {
		n += 1 + sovLifeline(uint64(m.State))
	}
	if m.LatestUpdate != 0 {
		n += 1 + sovLifeline(uint64(m.LatestUpdate))
	}
	l = m.JetID.Size()
	n += 1 + l + sovLifeline(uint64(l))
	if m.LatestRequest != nil {
		l = m.LatestRequest.Size()
		n += 1 + l + sovLifeline(uint64(l))
	}
	return n
}

func (m *DelegateKeyValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Key.Size()
	n += 1 + l + sovLifeline(uint64(l))
	l = m.Value.Size()
	n += 1 + l + sovLifeline(uint64(l))
	return n
}

func sovLifeline(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozLifeline(x uint64) (n int) {
	return sovLifeline(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *LifelineRaw) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LifelineRaw{`,
		`LatestState:` + fmt.Sprintf("%v", this.LatestState) + `,`,
		`LatestStateApproved:` + fmt.Sprintf("%v", this.LatestStateApproved) + `,`,
		`ChildPointer:` + fmt.Sprintf("%v", this.ChildPointer) + `,`,
		`Parent:` + fmt.Sprintf("%v", this.Parent) + `,`,
		`Delegates:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.Delegates), "DelegateKeyValue", "DelegateKeyValue", 1), `&`, ``, 1) + `,`,
		`State:` + fmt.Sprintf("%v", this.State) + `,`,
		`LatestUpdate:` + fmt.Sprintf("%v", this.LatestUpdate) + `,`,
		`JetID:` + fmt.Sprintf("%v", this.JetID) + `,`,
		`LatestRequest:` + fmt.Sprintf("%v", this.LatestRequest) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DelegateKeyValue) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DelegateKeyValue{`,
		`Key:` + fmt.Sprintf("%v", this.Key) + `,`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringLifeline(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *LifelineRaw) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLifeline
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LifelineRaw: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LifelineRaw: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LatestState", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLifeline
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLifeline
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthLifeline
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_insolar_insolar_insolar.ID
			m.LatestState = &v
			if err := m.LatestState.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LatestStateApproved", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLifeline
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLifeline
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthLifeline
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_insolar_insolar_insolar.ID
			m.LatestStateApproved = &v
			if err := m.LatestStateApproved.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChildPointer", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLifeline
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLifeline
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthLifeline
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_insolar_insolar_insolar.ID
			m.ChildPointer = &v
			if err := m.ChildPointer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Parent", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLifeline
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLifeline
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthLifeline
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Parent.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Delegates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLifeline
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLifeline
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLifeline
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Delegates = append(m.Delegates, DelegateKeyValue{})
			if err := m.Delegates[len(m.Delegates)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLifeline
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= StateID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LatestUpdate", wireType)
			}
			m.LatestUpdate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLifeline
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LatestUpdate |= github_com_insolar_insolar_insolar.PulseNumber(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JetID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLifeline
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLifeline
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthLifeline
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.JetID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LatestRequest", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLifeline
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLifeline
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthLifeline
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_insolar_insolar_insolar.ID
			m.LatestRequest = &v
			if err := m.LatestRequest.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLifeline(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLifeline
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLifeline
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DelegateKeyValue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLifeline
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DelegateKeyValue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DelegateKeyValue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLifeline
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLifeline
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthLifeline
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Key.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLifeline
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLifeline
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthLifeline
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Value.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLifeline(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLifeline
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLifeline
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLifeline(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLifeline
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLifeline
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLifeline
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthLifeline
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthLifeline
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowLifeline
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipLifeline(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthLifeline
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthLifeline = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLifeline   = fmt.Errorf("proto: integer overflow")
)
