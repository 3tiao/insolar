// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: network/node/internal/node/node.proto

package node

import (
	bytes "bytes"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"
	proto "github.com/gogo/protobuf/proto"
	github_com_insolar_insolar_insolar "github.com/insolar/insolar/insolar"
	io "io"
	math "math"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type Node struct {
	NodeID         github_com_insolar_insolar_insolar.Reference `protobuf:"bytes,1,opt,name=NodeID,proto3,customtype=github.com/insolar/insolar/insolar.Reference" json:"NodeID"`
	NodeShortID    uint32                                       `protobuf:"varint,2,opt,name=NodeShortID,proto3" json:"NodeShortID,omitempty"`
	NodeRole       uint32                                       `protobuf:"varint,3,opt,name=NodeRole,proto3" json:"NodeRole,omitempty"`
	NodePublicKey  []byte                                       `protobuf:"bytes,4,opt,name=NodePublicKey,proto3" json:"NodePublicKey,omitempty"`
	NodeAddress    string                                       `protobuf:"bytes,5,opt,name=NodeAddress,proto3" json:"NodeAddress,omitempty"`
	CAddress       string                                       `protobuf:"bytes,6,opt,name=CAddress,proto3" json:"CAddress,omitempty"`
	NodeVersion    string                                       `protobuf:"bytes,7,opt,name=NodeVersion,proto3" json:"NodeVersion,omitempty"`
	NodeLeavingETA uint32                                       `protobuf:"varint,8,opt,name=NodeLeavingETA,proto3" json:"NodeLeavingETA,omitempty"`
	State          uint32                                       `protobuf:"varint,9,opt,name=state,proto3" json:"state,omitempty"`
}

func (m *Node) Reset()      { *m = Node{} }
func (*Node) ProtoMessage() {}
func (*Node) Descriptor() ([]byte, []int) {
	return fileDescriptor_54a5c157c9a4f0ee, []int{0}
}
func (m *Node) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Node) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Node.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Node) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Node.Merge(m, src)
}
func (m *Node) XXX_Size() int {
	return m.Size()
}
func (m *Node) XXX_DiscardUnknown() {
	xxx_messageInfo_Node.DiscardUnknown(m)
}

var xxx_messageInfo_Node proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Node)(nil), "node.Node")
}

func init() {
	proto.RegisterFile("network/node/internal/node/node.proto", fileDescriptor_54a5c157c9a4f0ee)
}

var fileDescriptor_54a5c157c9a4f0ee = []byte{
	// 360 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x91, 0x3f, 0x4f, 0x22, 0x41,
	0x18, 0xc6, 0x67, 0xb8, 0x85, 0x83, 0xb9, 0xe3, 0x8a, 0xcd, 0x15, 0x13, 0x8a, 0x97, 0xcd, 0xe5,
	0xee, 0x42, 0xa1, 0x6c, 0xa1, 0x95, 0xb1, 0x01, 0xb1, 0x20, 0x12, 0x63, 0x56, 0x63, 0xbf, 0xcb,
	0x0e, 0xcb, 0xc6, 0x75, 0xc6, 0xcc, 0x2e, 0x1a, 0x3b, 0x3f, 0x82, 0x1f, 0xc1, 0x92, 0x8f, 0x42,
	0x49, 0x49, 0x8c, 0x21, 0xee, 0xd2, 0x58, 0x52, 0x5a, 0x9a, 0x19, 0xfe, 0x88, 0x34, 0xf3, 0x3e,
	0xbf, 0xe7, 0xc9, 0xfb, 0x27, 0x19, 0xf2, 0x8f, 0xb3, 0xe4, 0x4e, 0xc8, 0x2b, 0x9b, 0x0b, 0x9f,
	0xd9, 0x21, 0x4f, 0x98, 0xe4, 0x6e, 0xb4, 0x20, 0xf5, 0xd4, 0x6f, 0xa4, 0x48, 0x84, 0x69, 0x28,
	0x5d, 0xd9, 0x0d, 0xc2, 0xa4, 0x3f, 0xf0, 0xea, 0x5d, 0x71, 0x6d, 0x07, 0x22, 0x10, 0xb6, 0x0e,
	0xbd, 0x41, 0x4f, 0x93, 0x06, 0xad, 0x16, 0x4d, 0x7f, 0x5e, 0x72, 0xc4, 0x38, 0x15, 0x3e, 0x33,
	0x3b, 0xa4, 0xa0, 0x6a, 0xbb, 0x45, 0xb1, 0x85, 0x6b, 0x3f, 0x9b, 0xfb, 0xa3, 0x69, 0x15, 0x3d,
	0x4f, 0xab, 0x3b, 0x1b, 0xf3, 0x42, 0x1e, 0x8b, 0xc8, 0x95, 0xdb, 0xb5, 0xee, 0xb0, 0x1e, 0x93,
	0x8c, 0x77, 0x99, 0xb3, 0x9c, 0x61, 0x5a, 0xe4, 0x87, 0x52, 0xe7, 0x7d, 0x21, 0x93, 0x76, 0x8b,
	0xe6, 0x2c, 0x5c, 0x2b, 0x3b, 0x9b, 0x96, 0x59, 0x21, 0x45, 0x85, 0x8e, 0x88, 0x18, 0xfd, 0xa6,
	0xe3, 0x35, 0x9b, 0x7f, 0x49, 0x59, 0xe9, 0xb3, 0x81, 0x17, 0x85, 0xdd, 0x13, 0x76, 0x4f, 0x0d,
	0x75, 0x92, 0xf3, 0xd5, 0x5c, 0xed, 0x68, 0xf8, 0xbe, 0x64, 0x71, 0x4c, 0xf3, 0x16, 0xae, 0x95,
	0x9c, 0x4d, 0x4b, 0xed, 0x38, 0x5a, 0xc5, 0x05, 0x1d, 0xaf, 0x79, 0xd5, 0x7d, 0xc9, 0x64, 0x1c,
	0x0a, 0x4e, 0xbf, 0x7f, 0x76, 0x2f, 0x2d, 0xf3, 0x3f, 0xf9, 0xa5, 0xb0, 0xc3, 0xdc, 0xdb, 0x90,
	0x07, 0xc7, 0x17, 0x0d, 0x5a, 0xd4, 0x77, 0x6e, 0xb9, 0xe6, 0x6f, 0x92, 0x8f, 0x13, 0x37, 0x61,
	0xb4, 0xa4, 0xe3, 0x05, 0x1c, 0x18, 0xc3, 0xa7, 0x2a, 0x6e, 0x1e, 0x8e, 0x52, 0x40, 0xe3, 0x14,
	0xd0, 0x24, 0x05, 0x34, 0x4f, 0x01, 0xbf, 0xa7, 0x80, 0x1e, 0x32, 0xc0, 0xc3, 0x0c, 0xf0, 0x28,
	0x03, 0x3c, 0xce, 0x00, 0xbf, 0x66, 0x80, 0xdf, 0x32, 0x40, 0xf3, 0x0c, 0xf0, 0xe3, 0x0c, 0xd0,
	0x78, 0x06, 0x68, 0x32, 0x03, 0xe4, 0x15, 0xf4, 0x1f, 0xed, 0x7d, 0x04, 0x00, 0x00, 0xff, 0xff,
	0xc5, 0xa2, 0xb2, 0x9a, 0x01, 0x02, 0x00, 0x00,
}

func (this *Node) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Node)
	if !ok {
		that2, ok := that.(Node)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NodeID.Equal(that1.NodeID) {
		return false
	}
	if this.NodeShortID != that1.NodeShortID {
		return false
	}
	if this.NodeRole != that1.NodeRole {
		return false
	}
	if !bytes.Equal(this.NodePublicKey, that1.NodePublicKey) {
		return false
	}
	if this.NodeAddress != that1.NodeAddress {
		return false
	}
	if this.CAddress != that1.CAddress {
		return false
	}
	if this.NodeVersion != that1.NodeVersion {
		return false
	}
	if this.NodeLeavingETA != that1.NodeLeavingETA {
		return false
	}
	if this.State != that1.State {
		return false
	}
	return true
}

type NodeFace interface {
	Proto() github_com_gogo_protobuf_proto.Message
	GetNodeID() github_com_insolar_insolar_insolar.Reference
	GetNodeShortID() uint32
	GetNodeRole() uint32
	GetNodePublicKey() []byte
	GetNodeAddress() string
	GetCAddress() string
	GetNodeVersion() string
	GetNodeLeavingETA() uint32
	GetState() uint32
}

func (this *Node) Proto() github_com_gogo_protobuf_proto.Message {
	return this
}

func (this *Node) TestProto() github_com_gogo_protobuf_proto.Message {
	return NewNodeFromFace(this)
}

func (this *Node) GetNodeID() github_com_insolar_insolar_insolar.Reference {
	return this.NodeID
}

func (this *Node) GetNodeShortID() uint32 {
	return this.NodeShortID
}

func (this *Node) GetNodeRole() uint32 {
	return this.NodeRole
}

func (this *Node) GetNodePublicKey() []byte {
	return this.NodePublicKey
}

func (this *Node) GetNodeAddress() string {
	return this.NodeAddress
}

func (this *Node) GetCAddress() string {
	return this.CAddress
}

func (this *Node) GetNodeVersion() string {
	return this.NodeVersion
}

func (this *Node) GetNodeLeavingETA() uint32 {
	return this.NodeLeavingETA
}

func (this *Node) GetState() uint32 {
	return this.State
}

func NewNodeFromFace(that NodeFace) *Node {
	this := &Node{}
	this.NodeID = that.GetNodeID()
	this.NodeShortID = that.GetNodeShortID()
	this.NodeRole = that.GetNodeRole()
	this.NodePublicKey = that.GetNodePublicKey()
	this.NodeAddress = that.GetNodeAddress()
	this.CAddress = that.GetCAddress()
	this.NodeVersion = that.GetNodeVersion()
	this.NodeLeavingETA = that.GetNodeLeavingETA()
	this.State = that.GetState()
	return this
}

func (this *Node) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 13)
	s = append(s, "&node.Node{")
	s = append(s, "NodeID: "+fmt.Sprintf("%#v", this.NodeID)+",\n")
	s = append(s, "NodeShortID: "+fmt.Sprintf("%#v", this.NodeShortID)+",\n")
	s = append(s, "NodeRole: "+fmt.Sprintf("%#v", this.NodeRole)+",\n")
	s = append(s, "NodePublicKey: "+fmt.Sprintf("%#v", this.NodePublicKey)+",\n")
	s = append(s, "NodeAddress: "+fmt.Sprintf("%#v", this.NodeAddress)+",\n")
	s = append(s, "CAddress: "+fmt.Sprintf("%#v", this.CAddress)+",\n")
	s = append(s, "NodeVersion: "+fmt.Sprintf("%#v", this.NodeVersion)+",\n")
	s = append(s, "NodeLeavingETA: "+fmt.Sprintf("%#v", this.NodeLeavingETA)+",\n")
	s = append(s, "State: "+fmt.Sprintf("%#v", this.State)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringNode(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *Node) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Node) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintNode(dAtA, i, uint64(m.NodeID.Size()))
	n1, err1 := m.NodeID.MarshalTo(dAtA[i:])
	if err1 != nil {
		return 0, err1
	}
	i += n1
	if m.NodeShortID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintNode(dAtA, i, uint64(m.NodeShortID))
	}
	if m.NodeRole != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintNode(dAtA, i, uint64(m.NodeRole))
	}
	if len(m.NodePublicKey) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintNode(dAtA, i, uint64(len(m.NodePublicKey)))
		i += copy(dAtA[i:], m.NodePublicKey)
	}
	if len(m.NodeAddress) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintNode(dAtA, i, uint64(len(m.NodeAddress)))
		i += copy(dAtA[i:], m.NodeAddress)
	}
	if len(m.CAddress) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintNode(dAtA, i, uint64(len(m.CAddress)))
		i += copy(dAtA[i:], m.CAddress)
	}
	if len(m.NodeVersion) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintNode(dAtA, i, uint64(len(m.NodeVersion)))
		i += copy(dAtA[i:], m.NodeVersion)
	}
	if m.NodeLeavingETA != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintNode(dAtA, i, uint64(m.NodeLeavingETA))
	}
	if m.State != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintNode(dAtA, i, uint64(m.State))
	}
	return i, nil
}

func encodeVarintNode(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Node) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.NodeID.Size()
	n += 1 + l + sovNode(uint64(l))
	if m.NodeShortID != 0 {
		n += 1 + sovNode(uint64(m.NodeShortID))
	}
	if m.NodeRole != 0 {
		n += 1 + sovNode(uint64(m.NodeRole))
	}
	l = len(m.NodePublicKey)
	if l > 0 {
		n += 1 + l + sovNode(uint64(l))
	}
	l = len(m.NodeAddress)
	if l > 0 {
		n += 1 + l + sovNode(uint64(l))
	}
	l = len(m.CAddress)
	if l > 0 {
		n += 1 + l + sovNode(uint64(l))
	}
	l = len(m.NodeVersion)
	if l > 0 {
		n += 1 + l + sovNode(uint64(l))
	}
	if m.NodeLeavingETA != 0 {
		n += 1 + sovNode(uint64(m.NodeLeavingETA))
	}
	if m.State != 0 {
		n += 1 + sovNode(uint64(m.State))
	}
	return n
}

func sovNode(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozNode(x uint64) (n int) {
	return sovNode(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Node) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Node{`,
		`NodeID:` + fmt.Sprintf("%v", this.NodeID) + `,`,
		`NodeShortID:` + fmt.Sprintf("%v", this.NodeShortID) + `,`,
		`NodeRole:` + fmt.Sprintf("%v", this.NodeRole) + `,`,
		`NodePublicKey:` + fmt.Sprintf("%v", this.NodePublicKey) + `,`,
		`NodeAddress:` + fmt.Sprintf("%v", this.NodeAddress) + `,`,
		`CAddress:` + fmt.Sprintf("%v", this.CAddress) + `,`,
		`NodeVersion:` + fmt.Sprintf("%v", this.NodeVersion) + `,`,
		`NodeLeavingETA:` + fmt.Sprintf("%v", this.NodeLeavingETA) + `,`,
		`State:` + fmt.Sprintf("%v", this.State) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringNode(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Node) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNode
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Node: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Node: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthNode
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthNode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.NodeID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeShortID", wireType)
			}
			m.NodeShortID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NodeShortID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeRole", wireType)
			}
			m.NodeRole = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NodeRole |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodePublicKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthNode
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthNode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodePublicKey = append(m.NodePublicKey[:0], dAtA[iNdEx:postIndex]...)
			if m.NodePublicKey == nil {
				m.NodePublicKey = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNode
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNode
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNode
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeLeavingETA", wireType)
			}
			m.NodeLeavingETA = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NodeLeavingETA |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNode(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNode
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthNode
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipNode(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowNode
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNode
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNode
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthNode
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthNode
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowNode
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipNode(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthNode
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthNode = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowNode   = fmt.Errorf("proto: integer overflow")
)
