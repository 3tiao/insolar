/*
 *    Copyright 2019 Insolar Technologies
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */

package sample

import (
	"github.com/insolar/insolar/conveyor/generator/common"
	"log"
)

// custom types
type Event struct{}
type Payload struct{}

// conveyer: state_machine
type TestStateMachine interface {
	// STF = State Machine Flow
	// TypeID() common.ElType // denotes TypeID of StateMachine for this Flow is for

	Init(input Event) (*Payload, common.ElState, error)// i[nit][_AnyText](input ?) ([error,][state,] payload)
	//
	// transition handler, from state 0 to S_FIRST().
	// should be before any handler.
	// must have one parameter for input event and payload result
	// all handlers must use 1st param of type assignable from this "input" (string)
	// next handler must use 2nd param of type assignable from this "payload" (P1)

	StateFirst() common.ElState // S[TATE]_NAME() ElState
	// denotes a state, number is autogenerated +1 from prev (here is 1)
	// by default transition(s) defined before state will move to this state
	// must return ElState

	TransitFirstSecond(input Event, payload *Payload) (*Payload, common.ElState, error)
	MigrateFirst(input Event, payload *Payload) (*Payload, common.ElState, error)
	ErrorFirst(input Event, payload *Payload, err error) (*Payload, common.ElState)

	StateSecond() common.ElState

	TransitSecondThird(input Event, payload *Payload) (*Payload, common.ElState, error)
	MigrateSecond(input Event, payload *Payload) (*Payload, common.ElState, error)
	ErrorSecond(input Event, payload *Payload, err error) (*Payload, common.ElState)
}

type TestStateMachineImplementation struct {
	SMFIDTestStateMachine
}

func (t *TestStateMachineImplementation) Init(input Event) (*Payload, common.ElState, error) {
	return nil, t.StateFirst(), nil
}

func (t *TestStateMachineImplementation) TransitFirstSecond(input Event, payload *Payload) (*Payload, common.ElState, error) {
	return nil, t.StateSecond(), nil
}

func (t *TestStateMachineImplementation) MigrateFirst(input Event, payload *Payload) (*Payload, common.ElState, error) {
	return nil, t.StateSecond(), nil
}

func (t *TestStateMachineImplementation) ErrorFirst(input Event, payload *Payload, err error) (*Payload, common.ElState) {
	log.Print(err)
	return nil, t.StateSecond()
}

func (t *TestStateMachineImplementation) TransitSecondThird(input Event, payload *Payload) (*Payload, common.ElState, error) {
	return nil, 0, nil
}

func (t *TestStateMachineImplementation) MigrateSecond(input Event, payload *Payload) (*Payload, common.ElState, error) {
	return nil, 0, nil
}

func (t *TestStateMachineImplementation) ErrorSecond(input Event, payload *Payload, err error) (*Payload, common.ElState) {
	log.Print(err)
	return nil, 0
}